const e=" \t()*";function t(t,i){let n,r,s;function u(){for(;s&&e.includes(s);)o()}function a(e){return e>="0"&&"9">=e}function o(){r++,s=n.charAt(r)}function l(e){r=e,s=n.charAt(r)}function f(){let e,t="";if(e=r,"+"===s?o():"-"===s&&(t+=s,o()),!function(e){return e>="0"&&"9">=e||"."===e}(s))return l(e),null;if("."===s){if(t+=s,o(),!a(s))return l(e),null}else{for(;a(s);)t+=s,o();"."===s&&(t+=s,o())}for(;a(s);)t+=s,o();if("E"===s||"e"===s){let e="";const i=r;if(e+=s,o(),"+"!==s&&"-"!==s||(e+=s,o()),!a(s))return l(i),t;for(t+=e;a(s);)t+=s,o()}return t}function p(){let e="",t=n.charCodeAt(r);for(;t>=48&&57>=t||t>=65&&90>=t||t>=97&&122>=t;)e+=s,o(),t=n.charCodeAt(r);return t=e.charCodeAt(0),t>=65&&90>=t||t>=97&&122>=t?e:null}function m(e){return s===e?(o(),e):null}return function(e){if(n=e,r=-1,s="","string"!=typeof n)throw new TypeError("Invalid argument in parse, string expected");const a={type:"Unit",value:null,unitList:[],dimension:{}};let l=1,c=!1;o(),u();const v=function(){const e=["NaN","Infinity","-Infinity"];for(let t of e)if(n.substr(r,t.length)===t)return r+=t.length,s=n.charAt(r),t;return null}()||f();for(v&&(a.value=t.type.conv(v),u(),m("/")&&(l=-1,c=!0));;){let t;if(u(),!s)break;{const e=s;if(t=p(),null===t)throw new SyntaxError('Unexpected "'+e+'" in "'+n+'" at index '+r)}const o=i(t);if(null===o)throw new SyntaxError('Unit "'+t+'" not found.');let v=l;if(u(),m("^")){u();const t=f();if(null===t)throw new SyntaxError('In "'+e+'", "^" must be followed by a floating-point number');v*=+t}a.unitList.push({unit:o.unit,prefix:o.prefix,power:v});for(let e of Object.keys(o.unit.dimension))a.dimension[e]=(a.dimension[e]||0)+(o.unit.dimension[e]||0)*v;if(u(),c=!1,m("/")){if(-1===l)throw new SyntaxError(`Unexpected additional "/" in "${n}" at index ${r}`);l=-1,c=!0}}if(c)throw new SyntaxError('Trailing characters: "'+e+'"');return a}}function i(e,t,i){let n,s,u,a;if(null==t||0===e.length)return t;if(r(e)){let r=t;for(let t=0;e.length>t;t++)n=i.conv(e[t].unit.value),a=i.conv(e[t].unit.prefixGroup[e[t].prefix]),u=i.conv(e[t].power),r=i.mul(r,i.pow(i.mul(n,a),u));return r}return n=i.conv(e[0].unit.value),s=i.conv(e[0].unit.offset),a=i.conv(e[0].unit.prefixGroup[e[0].prefix]),i.mul(i.add(i.mul(t,a),s),n)}function n(e,t,i){let n,s,u,a;if(null==t||0===e.length)return t;if(r(e)){let r=t;for(let t=0;e.length>t;t++)n=i.conv(e[t].unit.value),a=i.conv(e[t].unit.prefixGroup[e[t].prefix]),u=i.conv(e[t].power),r=i.div(r,i.pow(i.mul(n,a),u));return r}return n=i.conv(e[0].unit.value),a=i.conv(e[0].unit.prefixGroup[e[0].prefix]),s=i.conv(e[0].unit.offset),i.div(i.sub(i.div(t,n),s),a)}function r(e){return 0!==e.length&&(e.length>1||Math.abs(e[0].power-1)>1e-15)}function s(e){return 1===e.length&&1e-15>Math.abs(e[0].power-1)&&1===Object.keys(e[0].unit.dimension).length&&1===e[0].unit.dimension[Object.keys(e[0].unit.dimension)[0]]}const u={si:["m","meter","s","A","kg","K","mol","rad","b","F","C","S","V","J","N","Hz","ohm","H","cd","lm","lx","Wb","T","W","Pa","ohm","sr"],cgs:["cm","s","A","g","K","mol","rad","b","F","C","S","V","erg","dyn","Hz","ohm","H","cd","lm","lx","Wb","T","Pa","ohm","sr"],us:["ft","mi","mile","in","inch","s","A","lbm","degF","mol","rad","b","F","C","S","V","BTU","lbf","Hz","ohm","H","cd","lm","lx","Wb","T","psi","ohm","sr","hp"]},a={NONE:{"":1},SHORT:{"":1,da:10,h:100,k:1e3,M:1e6,G:1e9,T:1e12,P:1e15,E:1e18,Z:1e21,Y:1e24,d:.1,c:.01,m:.001,u:1e-6,n:1e-9,p:1e-12,f:1e-15,a:1e-18,z:1e-21,y:1e-24},LONG:{"":1,deca:10,hecto:100,kilo:1e3,mega:1e6,giga:1e9,tera:1e12,peta:1e15,exa:1e18,zetta:1e21,yotta:1e24,deci:.1,centi:.01,milli:.001,micro:1e-6,nano:1e-9,pico:1e-12,femto:1e-15,atto:1e-18,zepto:1e-21,yocto:1e-24},BINARY_SHORT_SI:{"":1,k:1e3,M:1e6,G:1e9,T:1e12,P:1e15,E:1e18,Z:1e21,Y:1e24},BINARY_SHORT_IEC:{"":1,Ki:1024,Mi:1048576,Gi:1073741824,Ti:1099511627776,Pi:0x4000000000000,Ei:Math.pow(1024,6),Zi:Math.pow(1024,7),Yi:Math.pow(1024,8)},BINARY_LONG_SI:{"":1,kilo:1e3,mega:1e6,giga:1e9,tera:1e12,peta:1e15,exa:1e18,zetta:1e21,yotta:1e24},BINARY_LONG_IEC:{"":1,kibi:1024,mebi:1048576,gibi:1073741824,tebi:1099511627776,pebi:0x4000000000000,exi:Math.pow(1024,6),zebi:Math.pow(1024,7),yobi:Math.pow(1024,8)},BTU:{"":1,MM:1e6},SHORT_LONG:{},BINARY_SHORT:{},BINARY_LONG:{}};a.SHORT_LONG=Object.assign({},a.SHORT,a.LONG),a.BINARY_SHORT=Object.assign({},a.BINARY_SHORT_SI,a.BINARY_SHORT_IEC),a.BINARY_LONG=Object.assign({},a.BINARY_LONG_SI,a.BINARY_LONG_IEC);const o={"":{quantity:"UNITLESS",value:1},m:{quantity:"LENGTH",prefixGroup:"SHORT",formatPrefixes:["n","u","m","c","","k"],value:1},meter:{prefixGroup:"LONG",formatPrefixes:["nano","micro","milli","centi","","kilo"],value:"1 m",aliases:["meters"]},inch:{value:"0.0254 meter",aliases:["inches","in"]},foot:{value:"12 inch",aliases:["ft","feet"]},yard:{value:"3 foot",aliases:["yd","yards"]},mile:{value:"5280 ft",aliases:["mi","miles"]},link:{value:"7.92 in",aliases:["li","links"]},rod:{value:"25 link",aliases:["rd","rods"]},chain:{value:"100 link",aliases:["ch","chains"]},angstrom:{value:"1e-10 m",aliases:["angstroms"]},mil:{value:"1e-3 inch"},sqin:{value:"1 in^2"},sqft:{value:"1 ft^2"},sqyd:{value:"1 yd^2"},sqmi:{value:"1 mi^2"},sqrd:{value:"1 rod^2"},sqch:{value:"1 chain^2"},sqmil:{value:"1 mil^2"},acre:{value:"10 chain^2"},hectare:{value:"1e4 m^2"},L:{prefixGroup:"SHORT",formatPrefixes:["n","u","m",""],value:"1e-3 m^3",aliases:["l","lt"]},litre:{prefixGroup:"LONG",formatPrefixes:["nano","micro","milli",""],value:"1 L",aliases:["liter","liters","litres"]},cuin:{value:"1 in^3"},cuft:{value:"1 ft^3"},cuyd:{value:"1 yd^3"},teaspoon:{value:"4.92892159375 mL",aliases:["teaspoons","tsp"]},tablespoon:{value:"3 teaspoon",aliases:["tablespoons","tbsp"]},drop:{value:"0.05 mL"},gtt:{value:"0.05 mL"},minim:{value:"0.0125 teaspoon",aliases:["minims"]},fluidounce:{value:"0.125 cups",aliases:["floz","fluidounces"]},fluiddram:{value:"0.125 floz",aliases:["fldr","fluiddrams"]},cc:{value:"1 cm^3"},cup:{value:"236.5882365 mL",aliases:["cp","cups"]},pint:{value:"2 cup",aliases:["pt","pints"]},quart:{value:"4 cup",aliases:["qt","quarts"]},gallon:{value:"16 cup",aliases:["gal","gallons"]},oilbarrel:{value:"42 gal",aliases:["obl","oilbarrels"]},g:{quantity:"MASS",prefixGroup:"SHORT",formatPrefixes:["n","u","m","","k"],value:.001,basePrefix:"k"},gram:{prefixGroup:"LONG",formatPrefixes:["nano","micro","milli","","kilo"],value:"1 g"},poundmass:{value:"0.45359237 kg",aliases:["lb","lbs","lbm","poundmasses"]},ton:{value:"2000 lbm"},tonne:{prefixGroup:"LONG",formatPrefixes:["","kilo","mega","giga"],value:"1000 kg"},t:{prefixGroup:"SHORT",value:"1 tonne"},grain:{value:"64.79891 mg",aliases:["gr"]},ounce:{value:"0.0625 lbm",aliases:["oz","ounces"]},dram:{value:"0.0625 oz",aliases:["dr"]},hundredweight:{value:"100 lbm",aliases:["cwt","hundredweights"]},stick:{value:"4 oz",aliases:["sticks"]},stone:{value:"14 lbm"},s:{quantity:"TIME",prefixGroup:"SHORT",formatPrefixes:["f","p","n","u","m",""],value:1,aliases:["sec"]},min:{value:"60 s",aliases:["minute","minutes"]},h:{value:"60 min",aliases:["hr","hrs","hour","hours"]},second:{prefixGroup:"LONG",formatPrefixes:["femto","pico","nano","micro","milli",""],value:"1 s",aliases:["seconds"]},day:{value:"24 hr",aliases:["days"]},week:{value:"7 day",aliases:["weeks"]},month:{value:"30.4375 day",aliases:["months"]},year:{value:"365.25 day",aliases:["years"]},decade:{value:"10 year",aliases:["decades"]},century:{value:"100 year",aliases:["centuries"]},millennium:{value:"1000 year",aliases:["millennia"]},hertz:{prefixGroup:"LONG",formatPrefixes:["","kilo","mega","giga","tera"],value:"1/s"},Hz:{prefixGroup:"SHORT",formatPrefixes:["","k","M","G","T"],value:"1 hertz"},rad:{quantity:"ANGLE",prefixGroup:"SHORT",formatPrefixes:["m",""],value:1},radian:{prefixGroup:"LONG",formatPrefixes:["milli",""],value:"1 rad",aliases:["radians"]},sr:{quantity:"SOLID_ANGLE",prefixGroup:"SHORT",formatPrefixes:["u","m",""],value:1},steradian:{prefixGroup:"LONG",formatPrefixes:["micro","milli",""],value:"1 sr",aliases:["steradians"]},deg:{value:[Math.PI/180,"rad"],aliases:["degree","degrees"]},grad:{prefixGroup:"SHORT",formatPrefixes:["c"],value:[Math.PI/200,"rad"]},gradian:{prefixGroup:"LONG",formatPrefixes:["centi",""],value:[Math.PI/200,"rad"],aliases:["gradians"]},cycle:{value:[2*Math.PI,"rad"],aliases:["cycles"]},arcmin:{value:"0.016666666666666666 deg",aliases:["arcminute","arcminutes"]},arcsec:{value:"0.016666666666666666 arcmin",aliases:["arcsecond","arcseconds"]},A:{quantity:"CURRENT",prefixGroup:"SHORT",formatPrefixes:["u","m","","k"],value:1},ampere:{prefixGroup:"LONG",formatPrefixes:["micro","milli","","kilo"],value:"1 A",aliases:["amperes"]},K:{quantity:"TEMPERATURE",prefixGroup:"SHORT",formatPrefixes:["n","u","m",""],value:1},kelvin:{prefixGroup:"LONG",formatPrefixes:["nano","micro","milli",""],value:"1 K"},degC:{value:"1 K",offset:273.15,aliases:["celsius"]},degR:{value:[1/1.8,"K"],aliases:["rankine","R"]},degF:{value:"1 R",offset:459.67,aliases:["fahrenheit"]},mol:{quantity:"AMOUNT_OF_SUBSTANCE",prefixGroup:"SHORT",formatPrefixes:["","k"],value:1},mole:{prefixGroup:"LONG",formatPrefixes:["","kilo"],value:"1 mol",aliases:["moles"]},cd:{quantity:"LUMINOUS_INTENSITY",value:1,prefixGroup:"SHORT",formatPrefixes:["","m"]},candela:{value:"1 cd",prefixGroup:"LONG",formatPrefixes:["","milli"]},lumen:{prefixGroup:"LONG",value:"1 cd sr",aliases:["lumens"]},lm:{prefixGroup:"SHORT",value:"1 lumen"},lux:{prefixGroup:"LONG",value:"1 cd/m^2"},lx:{prefixGroup:"SHORT",value:"1 lux"},N:{prefixGroup:"SHORT",formatPrefixes:["u","m","","k","M"],value:"1 kg m/s^2"},newton:{prefixGroup:"LONG",formatPrefixes:["micro","milli","","kilo","mega"],value:"1 N",aliases:["newtons"]},dyn:{prefixGroup:"SHORT",formatPrefixes:["m","k","M"],value:"1 g cm/s^2"},dyne:{prefixGroup:"LONG",formatPrefixes:["milli","kilo","mega"],value:"1 dyn"},lbf:{value:"4.4482216152605 N",aliases:["poundforce"]},kip:{value:"1000 lbf",aliases:["kips"]},J:{prefixGroup:"SHORT",formatPrefixes:["m","","k","M","G"],value:"1 N m"},joule:{prefixGroup:"LONG",formatPrefixes:["milli","","kilo","mega","giga"],value:"1 J",aliases:["joules"]},erg:{value:"1 dyn cm"},Wh:{prefixGroup:"SHORT",formatPrefixes:["k","M","G","T"],value:"1 W hr"},BTU:{prefixGroup:"BTU",formatPrefixes:["","MM"],value:"1055.05585262 J",aliases:["BTUs"]},eV:{prefixGroup:"SHORT",formatPrefixes:["u","m","","k","M","G"],value:"1.602176565e-19 J"},electronvolt:{prefixGroup:"LONG",formatPrefixes:["micro","milli","","kilo","mega","giga"],value:"1 eV",aliases:["electronvolts"]},W:{prefixGroup:"SHORT",formatPrefixes:["p","n","u","m","","k","M","G","T","P"],value:"1 J/s"},watt:{prefixGroup:"LONG",formatPrefixes:["pico","nano","micro","milli","","kilo","mega","tera","peta"],value:"1 W",aliases:["watts"]},hp:{value:"550 ft lbf / s"},VA:{prefixGroup:"SHORT",formatPrefixes:["","k"],value:"1 W"},Pa:{prefixGroup:"SHORT",formatPrefixes:["","k","M","G"],value:"1 N / m^2"},psi:{value:"1 lbf/in^2"},atm:{value:"101325 Pa"},bar:{prefixGroup:"SHORT_LONG",formatPrefixes:["m",""],value:"1e5 Pa"},torr:{prefixGroup:"LONG",formatPrefixes:["milli",""],value:"133.32236842105263 Pa"},Torr:{prefixGroup:"SHORT",formatPrefixes:["m",""],value:"1 torr"},mmHg:{value:"133.322387415 Pa",aliases:["mmhg"]},inH2O:{value:"249.082 Pa",aliases:["inh2o","inAq"]},C:{prefixGroup:"SHORT",formatPrefixes:["p","n","u","m",""],value:"1 A s"},coulomb:{prefixGroup:"LONG",formatPrefixes:["pico","nano","micro","milli",""],value:"1 C",aliases:["coulombs"]},V:{prefixGroup:"SHORT",formatPrefixes:["m","","k","M"],value:"1 W/A"},volt:{prefixGroup:"LONG",formatPrefixes:["milli","","kilo","mega"],value:"1 V",aliases:["volts"]},F:{prefixGroup:"SHORT",formatPrefixes:["p","n","u","m",""],value:"1 C/V"},farad:{prefixGroup:"LONG",formatPrefixes:["pico","nano","micro","milli",""],value:"1 F",aliases:["farads"]},ohm:{prefixGroup:"SHORT_LONG",formatPrefixes:["","k","M"],value:"1 V/A",aliases:["ohms"]},H:{prefixGroup:"SHORT",formatPrefixes:["u","m",""],value:"1 V s / A"},henry:{prefixGroup:"LONG",formatPrefixes:["micro","milli",""],value:"1 H",aliases:["henries"]},S:{prefixGroup:"SHORT",formatPrefixes:["u","m",""],value:"1 / ohm"},siemens:{prefixGroup:"LONG",formatPrefixes:["micro","milli",""],value:"1 S"},Wb:{prefixGroup:"SHORT",formatPrefixes:["n","u","m",""],value:"1 V s"},weber:{prefixGroup:"LONG",formatPrefixes:["nano","micro","milli",""],value:"1 Wb",aliases:["webers"]},T:{prefixGroup:"SHORT",formatPrefixes:["n","u","m",""],value:"1 N s / C m"},tesla:{prefixGroup:"LONG",formatPrefixes:["nano","micro","milli",""],value:"1 T",aliases:["teslas"]},b:{quantity:"BIT",prefixGroup:"BINARY_SHORT",value:1},bits:{prefixGroup:"BINARY_LONG",value:"1 b",aliases:["bit"]},B:{prefixGroup:"BINARY_SHORT",value:"8 b"},bytes:{prefixGroup:"BINARY_LONG",value:"1 B",aliases:["byte"]}};const l=Symbol("_IS_UNITMATH_DEFAULT_FUNCTION");let f={add:(e,t)=>e+t,sub:(e,t)=>e-t,mul:(e,t)=>e*t,div:(e,t)=>e/t,pow:(e,t)=>Math.pow(e,t),abs:e=>Math.abs(e),eq:(e,t)=>e===t||1e-15>Math.abs(e-t)/Math.abs(e+t),lt:(e,t)=>t>e,gt:(e,t)=>e>t,le:(e,t)=>t>=e,ge:(e,t)=>e>=t,round:e=>Math.round(e),trunc:e=>Math.trunc(e),conv:e=>"string"==typeof e?parseFloat(e):e,clone:e=>e};for(const e of Object.keys(f))f[e][l]=!0;const p=e=>""+e;p[l]=!0;const m=function e(f){const p=["all","none"];if((f={...f}).formatPrefixDefault&&!p.includes(f.formatPrefixDefault))throw Error(`Invalid option for formatPrefixDefault: '${f.formatPrefixDefault}'. Valid options are ${p.join(", ")}`);const m=["conv","clone","add","sub","mul","div","pow"];let c=!0,v=!1;for(const e of m)f.type?.[e][l]?c=!1:v=!0;if(v){if(!c)throw Error("You must supply all required custom type functions: "+m.join(", "));if(f.autoPrefix){const e=["lt","gt","le","ge","abs"];let t=!0;for(const i of e)f.type?.[i][l]&&(t=!1);if(!t)throw Error("The following custom type functions are required when prefix is true: "+e.join(", "))}}function y(e,t){let i=new h(e,t);return Object.freeze(i),i}Object.freeze(f);class h{type="Unit";value;unitList;dimension;fixed;constructor(e,t){let r;if(void 0===e&&void 0===t)r=S.parser(""),r.value=null;else if("string"==typeof e&&void 0===t)r=S.parser(e);else if(d(e))r=e;else if("string"==typeof t)r=S.parser(t),r.value=null==e?null:f.type.conv(e);else{if(void 0!==t)throw new TypeError("To construct a unit, you must supply a single string, two strings, a number and a string, or a custom type and a string.");r=S.parser(""),r.value=null==e?null:f.type.conv(e)}this.dimension=O(r.dimension),this.unitList=b(r.unitList),this.value=null==r.value?null:n(this.unitList,i(r.unitList,r.value,f.type),f.type),this.fixed=!1}clone(){let e=g(this);return Object.freeze(e),e}add(e,t){const r=function(e,t){if(null==e.value||null==t.value)throw Error(`Cannot add ${""+e} and ${""+t}: both units must have values`);if(!e.equalsQuantity(t))throw Error(`Cannot add ${""+e} and ${""+t}: dimensions do not match`);const r=g(e);return r.value=n(e.unitList,f.type.add(i(e.unitList,e.value,f.type),i(t.unitList,t.value,f.type)),f.type),r}(this,x(e,t));return Object.freeze(r),r}sub(e,t){const i=w(this,x(e,t));return Object.freeze(i),i}mul(e,t){const r=function(e,t){const r=g(e);for(let i of Object.keys({...e.dimension,...t.dimension}))r.dimension[i]=(e.dimension[i]||0)+(t.dimension[i]||0),1e-15>Math.abs(r.dimension[i])&&delete r.dimension[i];for(let e=0;t.unitList.length>e;e++){const i={...t.unitList[e]};r.unitList.push(i)}if(r.unitList=b(r.unitList),r.dimension=O(r.dimension),null!==e.value||null!==t.value){let s=f.type.conv(1);const u=i(e.unitList,null===e.value?s:e.value,f.type),a=i(t.unitList,null===t.value?s:t.value,f.type);r.value=n(r.unitList,f.type.mul(u,a),f.type)}else r.value=null;return r}(this,x(e,t));return Object.freeze(r),r}div(e,t){const r=function(e,t){const r=g(e);for(let i of Object.keys({...e.dimension,...t.dimension}))r.dimension[i]=(e.dimension[i]||0)-(t.dimension[i]||0),1e-15>Math.abs(r.dimension[i])&&delete r.dimension[i];for(let e=0;t.unitList.length>e;e++){const i={...t.unitList[e]};i.power=-i.power,r.unitList.push(i)}if(r.unitList=b(r.unitList),r.dimension=O(r.dimension),null!==e.value||null!==t.value){let s=f.type.conv(1);const u=i(e.unitList,null===e.value?s:e.value,f.type),a=i(t.unitList,null===t.value?s:t.value,f.type);r.value=n(r.unitList,f.type.div(u,a),f.type)}else r.value=null;return r}(this,x(e,t));return Object.freeze(r),r}pow(e){const t=G(this,e);return Object.freeze(t),t}sqrt(){const e=function(e){return G(e,.5)}(this);return Object.freeze(e),e}abs(){const e=function(e){const t=g(e);null!==t.value&&(t.value=n(t.unitList,f.type.abs(i(t.unitList,t.value,f.type)),f.type));return t}(this);return Object.freeze(e),e}split(e){let t=function(e,t){if(!f.type.conv[l]&&(f.type.round[l]||f.type.trunc[l]))throw Error("When using custom types, split requires a type.round and a type.trunc function");if(null===e.value)throw Error(`Cannot split ${""+e}: unit has no value`);let n=g(e);const r=[];for(let e=0;t.length>e&&(n=P(n,x(t[e])),e!==t.length-1);e++){const i=f.type.round(n.value);let s;s=f.type.eq(i,n.value)?i:f.type.trunc(n.value);const u=new h(s,""+t[e]);r.push(u),n=w(n,u)}let s=f.type.conv(0);for(let e=0;r.length>e;e++)s=f.type.add(s,i(r[e].unitList,r[e].value,f.type));f.type.eq(s,i(e.unitList,e.value,f.type))&&(n.value=f.type.conv(0));return r.push(n),r}(this,e);for(let e=0;t.length>e;e++)Object.freeze(t[e]);return t}to(e){let t;if(null==e)throw Error("to() requires a unit as a parameter");if("string"!=typeof e&&"Unit"!==e.type)throw new TypeError("Parameter must be a Unit or a string.");return t=P(this,e=x(e)),Object.freeze(t),t}toBaseUnits(){let e=function(e){const t=g(e),r=[];for(let e of Object.keys(t.dimension))if(Math.abs(t.dimension[e]||0)>1e-12)for(let i of Object.keys(S.defs.units))if(S.defs.units[i].quantity===e){r.push({unit:S.defs.units[i],prefix:S.defs.units[i].basePrefix||"",power:t.dimension[e]});break}t.unitList=r,null!==e.value&&(t.value=n(t.unitList,i(e.unitList,e.value,f.type),f.type));return t}(this);return Object.freeze(e),e}getComplexity(){return function(e){let t=e.length,i=e.filter((e=>1e-14>e.power)),n=e.filter((e=>e.power>1e-14));t+=2*n.filter((e=>Math.abs(e.power-1)>1e-14)).length;let r=i.length>0&&n.length>0?-1:1;t+=2*i.filter((e=>0>e.power&&Math.abs(e.power*r-1)>1e-14)).length,i.length>0&&n.length>0&&(t+=1);return t}(this.unitList)}setValue(e){let t=N(this,e);return Object.freeze(t),t}getValue(){return this.value}getNormalizedValue(){return null===this.value?null:i(this.unitList,this.value,f.type)}setNormalizedValue(e){let t=N(this,n(this.unitList,e,f.type));return Object.freeze(t),t}getInferredSystem(){let e=null,t={};for(let e of this.unitList)for(let i of Object.keys(S.defs.systems))for(let n of S.defs.systems[i]){`${n.unitList[0].prefix}${n.unitList[0].unit.name}`===`${e.prefix}${e.unit.name}`?t[i]=(t[i]||0)+1:e.unit.name===n.unitList[0].unit.name&&(t[i]=(t[i]||0)+.5)}let i=Object.keys(t);if(i.length>0){let n=i[0],r=t[i[0]];for(let e=1;i.length>e;e++)t[i[e]]>r&&(n=i[e],r=t[i[e]]);e=n}return e}autoPrefix(e){return T(this,k(e))}simplify(e){let t=k(e),r=t.system;if("auto"===r){let e=this.getInferredSystem();e&&(r=e)}let u=S.defs.systems[r]||[];const a=[];let o,l=[];for(let e of u)this.equalsQuantity(e)&&l.push(e);l.length>0&&(o=l[0]);for(let e of this.unitList)for(let t of l){if(1===t.unitList.length&&`${t.unitList[0].prefix}${t.unitList[0].unit.name}`===`${e.prefix}${e.unit.name}`){o=t;break}}if(!o)for(let e of this.unitList)if(this.equalsQuantity(e.unit.name)){o=new h(e.unit.name);break}let p=!0;if(o)a.push(...o.unitList);else for(let e of Object.keys(this.dimension))if(Math.abs(this.dimension[e]||0)>1e-12){let t=!1;for(let i of u)if(s(i.unitList)&&1===i.dimension[e]){a.push({unit:i.unitList[0].unit,prefix:i.unitList[0].prefix,power:this.dimension[e]}),t=!0;break}if(!t)for(const i of Object.values(S.defs.units))if(i.quantity===e){a.push({unit:i,prefix:i.basePrefix||"",power:this.dimension[e]}),t=!0;break}t||(p=!1)}let m=g(this);return p&&(m.unitList=a,m.value=null!==this.value?n(m.unitList,i(this.unitList,this.value,f.type),f.type):null),t.autoPrefix?T(m,t):(Object.freeze(m),m)}getUnits(){let e=g(this);return e.value=null,Object.freeze(e),e}isCompound(){return r(this.unitList)}isBase(){return s(this.unitList)}equalsQuantity(e){e=x(e);for(let t of Object.keys({...this.dimension,...e.dimension}))if(Math.abs((this.dimension[t]||0)-(e.dimension[t]||0))>1e-12)return!1;return!0}equals(e){if(!f.type.conv[l]&&f.type.eq[l])throw Error("When using custom types, equals requires a type.eq function");if(e=x(e),null===this.value!=(null===e.value))return!1;let{value1:t,value2:i}=L(this,e,!1);return this.equalsQuantity(e)&&f.type.eq(t,i)}compare(e){if(!f.type.conv[l]&&(f.type.gt[l]||f.type.lt[l]))throw Error("When using custom types, compare requires a type.gt and a type.lt function");e=x(e);let{value1:t,value2:i}=L(this,e,!0);return"number"==typeof t&&isNaN(t)?1:"number"==typeof i&&isNaN(i)||f.type.lt(t,i)?-1:f.type.gt(t,i)?1:0}lessThan(e){if(!f.type.conv[l]&&f.type.lt[l])throw Error("When using custom types, lessThan requires a type.lt function");e=x(e);let{value1:t,value2:i}=L(this,e,!0);return f.type.lt(t,i)}lessThanOrEqual(e){if(!f.type.conv[l]&&f.type.le[l])throw Error("When using custom types, lessThanOrEqual requires a type.le function");e=x(e);let{value1:t,value2:i}=L(this,e,!0);return f.type.le(t,i)}greaterThan(e){if(!f.type.conv[l]&&f.type.gt[l])throw Error("When using custom types, greaterThan requires a type.gt function");e=x(e);let{value1:t,value2:i}=L(this,e,!0);return f.type.gt(t,i)}greaterThanOrEqual(e){if(!f.type.conv[l]&&f.type.ge[l])throw Error("When using custom types, greaterThanOrEqual requires a type.ge function");e=x(e);let{value1:t,value2:i}=L(this,e,!0);return f.type.ge(t,i)}toString(e){let t=this.clone(),i=k(e),n="";"number"==typeof t.value&&i.formatter[l]&&i.precision>0?n+=+t.value.toPrecision(i.precision):null!==t.value&&(n+=i.formatter(t.value));const r=function(e,t){let i="",n="",r=0,s=0;for(let t=0;e.unitList.length>t;t++)e.unitList[t].power>0?(r++,i+=" "+e.unitList[t].prefix+e.unitList[t].unit.name,Math.abs(e.unitList[t].power-1)>1e-15&&(i+="^"+e.unitList[t].power)):0>e.unitList[t].power&&s++;if(s>0)for(let t=0;e.unitList.length>t;t++)0>e.unitList[t].power&&(r>0?(n+=" "+e.unitList[t].prefix+e.unitList[t].unit.name,Math.abs(e.unitList[t].power+1)>1e-15&&(n+="^"+-e.unitList[t].power)):(n+=" "+e.unitList[t].prefix+e.unitList[t].unit.name,n+="^"+e.unitList[t].power));i=i.substr(1),n=n.substr(1),t.parentheses&&(r>1&&s>0&&(i="("+i+")"),s>1&&r>0&&(n="("+n+")"));let u=i;r>0&&s>0&&(u+=" / ");return u+=n,u}(t,i);return r.length>0&&n.length>0&&(n+=" "),n+=r,n}}function d(e){return"Unit"===e?.type&&!e.clone}function x(e,t){if(i=e,"Unit"===i?.type&&i.clone)return e;if(d(e)){return new h(e)}return"string"==typeof e?y(e):y(e,t);var i}function g(e){const t=new h;t.value=null===e.value?null:f.type.clone(e.value),t.dimension={...e.dimension},t.unitList=[];for(let i=0;e.unitList.length>i;i++)t.unitList[i]={},t.unitList[i]={...e.unitList[i]};return t}function b(e){let t=e.map((e=>Object.assign({},e)));if(t.length>=2){let e={};for(let i=0;t.length>i;i++)if(e.hasOwnProperty(t[i].unit.name)){e[t[i].unit.name].power+=t[i].power,t.splice(i,1),i--}else e[t[i].unit.name]=t[i];for(let e=0;t.length>e;e++)1e-15>Math.abs(t[e].power)&&(t.splice(e,1),e--)}return t}function O(e){let t={...e};for(let e of Object.keys(t))1e-15>Math.abs(t[e])&&delete t[e];return t}function L(e,t,n){if(n&&!e.equalsQuantity(t))throw Error(`Cannot compare units ${e} and ${t}; dimensions do not match`);let r,s;if(null===e.value&&null===t.value)r=i(e.unitList,f.type.conv(1),f.type),s=i(t.unitList,f.type.conv(1),f.type);else{if(null===e.value||null===t.value)throw Error(`Cannot compare units ${e} and ${t}; one has a value and the other does not`);r=i(e.unitList,e.value,f.type),s=i(t.unitList,t.value,f.type)}return{value1:r,value2:s}}function w(e,t){if(null==e.value||null==t.value)throw Error(`Cannot subtract ${""+e} and ${""+t}: both units must have values`);if(!e.equalsQuantity(t))throw Error(`Cannot subtract ${""+e} and ${""+t}: dimensions do not match`);const r=g(e);return r.value=n(e.unitList,f.type.sub(i(e.unitList,e.value,f.type),i(t.unitList,t.value,f.type)),f.type),r}function G(e,t){const i=g(e);for(let n of Object.keys(i.dimension))i.dimension[n]=e.dimension[n]*t;for(let e=0;i.unitList.length>e;e++)i.unitList[e].power=i.unitList[e].power*t;return i.value=null!==i.value?f.type.pow(i.value,f.type.conv(t)):null,i}function P(e,t){let r;const s=null===e.value?f.type.conv(1):e.value;if(!e.equalsQuantity(t))throw new TypeError(`Cannot convert ${""+e} to ${t}: dimensions do not match`);if(null!==t.value)throw Error(`Cannot convert ${""+e}: target unit must be valueless`);return r=g(t),r.value=n(r.unitList,i(e.unitList,s,f.type),f.type),r}function T(e,t){let r=g(e),s=r.unitList[0];if(1!==e.unitList.length)return e;if(null===e.value)return e;if(Math.abs(s.power-Math.round(s.power))>=1e-14)return e;if(1e-14>Math.abs(s.power))return e;if(f.type.lt(f.type.abs(e.value),f.type.conv(1e-50)))return e;if(f.type.le(f.type.abs(e.value),t.prefixMax)&&f.type.ge(f.type.abs(e.value),t.prefixMin))return e;let u=f.type.abs(e.value);function a(i){let n=f.type.abs(function(t){return f.type.div(e.value,f.type.pow(f.type.div(f.type.conv(s.unit.prefixGroup[t]),f.type.conv(s.unit.prefixGroup[s.prefix])),f.type.conv(s.power)))}(i));return f.type.lt(n,t.prefixMin)?f.type.div(f.type.conv(t.prefixMin),n):f.type.gt(n,t.prefixMax)?f.type.div(n,f.type.conv(t.prefixMax)):f.type.le(n,u)?f.type.sub(f.type.conv(1),f.type.div(n,u)):f.type.sub(f.type.conv(1),f.type.div(u,n))}let o=s.prefix,l=a(o),p=s.unit.formatPrefixes??("all"===t.formatPrefixDefault?Object.keys(s.unit.prefixGroup):void 0);if(!p)return e;for(let e=0;p.length>e;e++){let t=p[e],i=a(t);f.type.lt(i,l)&&(l=i,o=t)}return s.prefix=o,r.value=n(r.unitList,i(e.unitList,e.value,f.type),f.type),Object.freeze(r),r}function N(e,t){let i=g(e);return i.value=null==t?null:f.type.conv(t),i}function k(e){let t={...f};return"object"==typeof e&&(t=Object.assign(t,e)),t}let S=function(e){const{skipBuiltIns:n}=e.definitions;let r;if(n)r={...e.definitions.systems};else{r={...u};for(let t of Object.keys(e.definitions.systems))r[t]=r.hasOwnProperty(t)?[...e.definitions.systems[t],...r[t]]:[...e.definitions.systems[t]]}const s={systems:r,prefixGroups:{...n?{}:a,...e.definitions.prefixGroups},units:{...n?{}:o,...e.definitions.units}},l={units:{},prefixGroups:{...s.prefixGroups},systems:{}},f=t(e,m);for(;;){let t=0,n=[],r=[];for(const u of Object.keys(s.units)){if(l.units.hasOwnProperty(u))continue;const a=s.units[u];if(!a)continue;if("string"!=typeof a&&a.prefixGroup&&!l.prefixGroups.hasOwnProperty(a.prefixGroup))throw Error(`Unknown prefixes '${a.prefixGroup}' for unit '${u}'`);let o,m,c,v=!1;if("string"!=typeof(p=a)&&void 0!==p.quantity)o=e.type.conv(a.value),m={[a.quantity]:1},c=a.quantity;else{let t;try{if(!a.hasOwnProperty("value"))throw new TypeError(`Unit definition for '${u}' must be an object with a value property where the value is a string or a two-element array.`);if(a&&"string"==typeof a.value)t=f(a.value);else{if(!Array.isArray(a.value)||2!==a.value.length)throw new TypeError(`Unit definition for '${u}' must be an object with a value property where the value is a string or a two-element array.`);t=f(a.value[1]),t.value=e.type.conv(a.value[0])}if(null==t.value)throw Error(`Parsing value for '${u}' resulted in invalid value: ${t.value}`);o=i(t.unitList,t.value,e.type),m=Object.freeze(t.dimension)}catch(e){if(!(e instanceof Error&&/Unit.*not found/.test(""+e)))throw e;n.push(u),r.push(""+e),v=!0}}if(!v){let i=[u];a.aliases&&i.push(...a.aliases),i.forEach((i=>{if(l.units.hasOwnProperty(i))throw Error(`Alias '${i}' would override an existing unit`);if(!/^[a-zA-Z][a-zA-Z0-9]*$/.test(i)&&""!==i)throw new SyntaxError(`Unit name contains non-alphanumeric characters or begins with a number: '${i}'`);const n={name:i,value:o,offset:e.type.conv(a.offset?a.offset:0),dimension:m,prefixGroup:a.prefixGroup&&l.prefixGroups[a.prefixGroup]||{"":1},formatPrefixes:a.formatPrefixes,basePrefix:a.basePrefix};c&&(n.quantity=c),Object.freeze(n),l.units[i]=n,t++}))}}if(0===n.length)break;if(0===t)throw Error(`Could not create the following units: ${n.join(", ")}. Reasons follow: ${r.join(" ")}`)}var p;if("auto"!==e.system&&!s.systems.hasOwnProperty(e.system))throw Error(`Unknown unit system ${e.system}. Available systems are: auto, ${Object.keys(s.systems).join(", ")} `);for(let e of Object.keys(s.systems)){let t=s.systems[e];l.systems[e]=[];for(let i=0;t.length>i;i++){let n=f(t[i]);n.type="Unit",Object.freeze(n),l.systems[e][i]=n}}for(let e of Object.keys(l.units)){const t=l.units[e];if(t.formatPrefixes)for(let e=0;t.formatPrefixes.length>e;e++){let i=t.formatPrefixes[e];if(!t.prefixGroup.hasOwnProperty(i))throw Error(`In unit ${t.name}, common prefix ${i} was not found among the allowable prefixes`)}}function m(e){if("string"!=typeof e)throw new TypeError(`parameter must be a string (${e} given)`);if(l.units.hasOwnProperty(e))return{unit:l.units[e],prefix:""};for(const t of Object.keys(l.units))if(e.substring(e.length-t.length,e.length)===t){const i=l.units[t],n=e.substring(0,e.length-t.length);if(i.prefixGroup.hasOwnProperty(n))return{unit:i,prefix:n}}return null}return Object.freeze(l.prefixGroups),Object.freeze(l.systems),Object.freeze(l.units),{originalDefinitions:s,defs:l,exists:function(e){return null!==m(e)},findUnit:m,parser:f}}(f);return y.config=function(t){let i=Object.assign({},f,t);return i.definitions=Object.assign({},f.definitions,t.definitions),i.type=Object.assign({},f.type,t.type),e(i)},y.getConfig=function(){return f},y.definitions=function(){return S.originalDefinitions},y.add=function(e,t){return x(e).add(t)},y.sub=function(e,t){return x(e).sub(t)},y.mul=function(e,t){return x(e).mul(t)},y.div=function(e,t){return x(e).div(t)},y.pow=function(e,t){return x(e).pow(t)},y.sqrt=function(e){return x(e).sqrt()},y.abs=function(e){return x(e).abs()},y.to=function(e,t){return x(e).to(t)},y.toBaseUnits=function(e){return x(e).toBaseUnits()},y.exists=S.exists,y._unitStore=S,Object.freeze(y),y}({parentheses:!1,precision:15,autoPrefix:!0,prefixMin:.1,prefixMax:1e3,formatPrefixDefault:"none",system:"auto",formatter:p,definitions:{skipBuiltIns:!1,units:{},prefixGroups:{},systems:{}},type:f});export{m as default};
